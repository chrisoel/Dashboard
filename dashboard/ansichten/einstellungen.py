"""
@file einstellungen.py
@brief Modul zur Verwaltung der Anwendungseinstellungen.

Dieses Modul stellt eine grafische Benutzeroberfl√§che f√ºr die Verwaltung von Einstellungen bereit.
Der Benutzer kann seinen Studiengang, das Startdatum, Urlaubssemester und das Zeitmodell √§ndern 
und speichern. Zudem besteht die M√∂glichkeit, die gesamte Datenbank zu l√∂schen.

Die Daten werden in der Datenbank gespeichert und bei jedem Start der Anwendung geladen.

@author CHOE
@date 2025-01-31
@version 1.0
"""


import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
import logging


class Einstellungen(ttk.Frame):
    """
    @brief GUI-Komponente f√ºr die Anwendungseinstellungen.

    Diese Klasse erm√∂glicht das √Ñndern und Speichern von Studiendaten wie Studiengangsname,
    Startdatum, Urlaubssemester und Zeitmodell. Zudem kann die gesamte Datenbank gel√∂scht werden.

    @extends ttk.Frame
    """

    def __init__(self, master):
        """
        @brief Initialisiert das Einstellungen-Widget.

        Erstellt die grafische Oberfl√§che und l√§dt die gespeicherten Einstellungen aus der Datenbank.

        @param master Das Hauptfenster (tkinter Parent Widget).
        """
        super().__init__(master)
        self.master = master
        self.logger = logging.getLogger("Einstellungen")
        
        self.zeitmodell_map = {
            "Vollzeit": "Vollzeit",
            "Teilzeit I": "TeilzeitI",
            "Teilzeit II": "TeilzeitII"
        }

        self.logger.info("üìå Einstellungen geladen.")
        
        self.daten = self.master.logik.get_einstellungen_ansicht_daten()

        self.erstelle_gui()
        self.update_idletasks()
        self.lade_daten()

    def erstelle_gui(self):
            """
            @brief Erstellt das GUI-Layout f√ºr die Einstellungen.

            F√ºgt Eingabefelder f√ºr den Studiengang, Startdatum, Urlaubssemester und das Zeitmodell hinzu.
            Zudem werden Buttons zum Speichern und L√∂schen der Datenbank erstellt.
            """
            ttk.Label(self, text="‚öôÔ∏è Einstellungen", font=("Arial", 16)).pack(pady=10)

            self.frame = ttk.Frame(self)
            self.frame.pack(pady=10)

            self.studiengang_entry = self.erzeuge_textfeld("üìö Studiengang:", 0)
            self.kalender = self.erzeuge_kalender("üìÖ Startdatum:", 1)

            self.urlaub_var1 = tk.IntVar()
            self.urlaub_var2 = tk.IntVar()
            self.erzeuge_checkbuttons("üèñÔ∏è Urlaubssemester:", 2, self.urlaub_var1, self.urlaub_var2)

            self.zeitmodell_var = tk.StringVar()
            self.zeitmodell_combobox = self.erzeuge_dropdown("‚è≥ Zeitmodell:", 4, list(self.zeitmodell_map.keys()), self.zeitmodell_var)

            self.erzeuge_buttons()

    def erzeuge_textfeld(self, label_text, row):
        """
        @brief Erzeugt ein Label mit einem Eingabefeld.

        @param label_text Der anzuzeigende Label-Text.
        @param row Die Zeile in der GUI, in der das Element platziert wird.
        @return Ein Entry-Widget zur Texteingabe.
        """
        ttk.Label(self.frame, text=label_text).grid(row=row, column=0, padx=5, pady=5, sticky="w")
        entry = ttk.Entry(self.frame)
        entry.grid(row=row, column=1, padx=5, pady=5)
        return entry

    def erzeuge_kalender(self, label_text, row):
        """
        @brief Erzeugt ein Label mit einem Kalender-Widget zur Datumsauswahl.

        @param label_text Der anzuzeigende Label-Text.
        @param row Die Zeile in der GUI, in der das Element platziert wird.
        @return Ein Calendar-Widget zur Datumsauswahl.
        """
        ttk.Label(self.frame, text=label_text).grid(row=row, column=0, padx=5, pady=5, sticky="w")
        kalender = Calendar(self.frame, selectmode="day", date_pattern="yyyy-mm-dd")
        kalender.grid(row=row, column=1, padx=5, pady=5)
        return kalender

    def erzeuge_checkbuttons(self, label_text, row, var1, var2):
        """
        @brief Erzeugt zwei Checkboxen zur Auswahl von Urlaubssemestern.

        @param label_text Der anzuzeigende Label-Text.
        @param row Die Zeile in der GUI, in der die Elemente platziert werden.
        @param var1 Boolean-Variable f√ºr die erste Checkbox.
        @param var2 Boolean-Variable f√ºr die zweite Checkbox.
        """
        ttk.Label(self.frame, text=label_text).grid(row=row, column=0, padx=5, pady=5, sticky="w")
        ttk.Checkbutton(self.frame, text="Urlaubssemester 1", variable=var1).grid(row=row, column=1, sticky="w")
        ttk.Checkbutton(self.frame, text="Urlaubssemester 2", variable=var2).grid(row=row + 1, column=1, sticky="w")

    def erzeuge_dropdown(self, label_text, row, values, variable):
        """
        @brief Erzeugt ein Dropdown-Men√º f√ºr die Auswahl eines Wertes.

        @param label_text Der anzuzeigende Label-Text.
        @param row Die Zeile in der GUI, in der das Element platziert wird.
        @param values Eine Liste von Werten f√ºr das Dropdown-Men√º.
        @param variable Die Variable, die das ausgew√§hlte Element speichert.
        @return Ein Combobox-Widget f√ºr die Auswahl.
        """
        ttk.Label(self.frame, text=label_text).grid(row=row, column=0, padx=5, pady=5, sticky="w")
        combobox = ttk.Combobox(self.frame, textvariable=variable, values=values, state="readonly")
        combobox.grid(row=row, column=1, padx=5, pady=5)
        combobox.current(0)
        return combobox
    
    def get_gui_zeitmodell(self, db_value):
        """
        @brief Konvertiert das Zeitmodell aus der Datenbank in eine GUI-lesbare Form.

        @param db_value Der in der Datenbank gespeicherte Wert.
        @return Die GUI-Darstellung des Zeitmodells.
        """
        return {v: k for k, v in self.zeitmodell_map.items()}.get(db_value, "Vollzeit")
    
    def get_db_zeitmodell(self, gui_value):
        """
        @brief Konvertiert das Zeitmodell aus der GUI in die Datenbank-Darstellung.

        @param gui_value Der vom Benutzer ausgew√§hlte Wert.
        @return Die Datenbank-Darstellung des Zeitmodells.
        """
        return self.zeitmodell_map.get(gui_value, "Vollzeit")

    def erzeuge_buttons(self):
        """
        @brief Erstellt die Steuerungsbuttons f√ºr die Einstellungen.

        Diese Methode erzeugt die Buttons zur Steuerung der Einstellungen, 
        einschlie√ülich eines Speicher-Buttons f√ºr √Ñnderungen und eines L√∂sch-Buttons 
        f√ºr das Entfernen aller Daten.

        @details
        - Der Speicher-Button (`üíæ √Ñnderungen speichern`) ruft `self.speichern()` auf.
        - Der L√∂sch-Button (`üóëÔ∏è Alle Daten l√∂schen`) ruft `self.datenbank_loeschen()` auf.
        - Die Buttons werden innerhalb eines Frames horizontal angeordnet.
        """
        button_frame = ttk.Frame(self)
        button_frame.pack(pady=10)

        ttk.Button(button_frame, text="üíæ √Ñnderungen speichern", command=self.speichern).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üóëÔ∏è Alle Daten l√∂schen", command=self.datenbank_loeschen).pack(side=tk.LEFT, padx=5)

    def lade_daten(self):
        """
        @brief L√§dt gespeicherte Benutzerdaten in die GUI.

        Diese Methode ruft die gespeicherten Einstellungen aus der Datenbank ab und 
        f√ºllt die entsprechenden GUI-Elemente mit den gespeicherten Werten.

        @details
        - Falls keine gespeicherten Daten vorhanden sind, wird die Methode beendet.
        - Der Studiengang wird in das entsprechende Eingabefeld geladen.
        - Das Startdatum wird im Kalender-Widget gesetzt.
        - Die Urlaubssemester-Checkboxen werden basierend auf gespeicherten Werten aktualisiert.
        - Das Zeitmodell wird anhand der gespeicherten Daten in die GUI-Form konvertiert.

        @note Falls keine Daten in der Datenbank gespeichert sind, passiert nichts.
        """
        if not self.daten:
            return

        self.studiengang_entry.insert(0, self.daten[0][0])
        self.kalender.selection_set(self.daten[0][1])

        urlaubssemester = self.daten[0][2] if len(self.daten[0]) > 2 else 0
        self.urlaub_var1.set(1 if urlaubssemester >= 1 else 0)
        self.urlaub_var2.set(1 if urlaubssemester == 2 else 0)

        zeitmodell_db = self.daten[0][3] if len(self.daten[0]) > 3 else "Vollzeit"
        self.zeitmodell_combobox.set(self.get_gui_zeitmodell(zeitmodell_db))

    def speichern(self):
        """
        @brief Speichert die ge√§nderten Einstellungen in die Datenbank.

        √úberpr√ºft die Benutzereingaben und speichert sie in der Datenbank. Falls erforderlich,
        wird eine Fehlermeldung angezeigt.
        """
        neuer_studiengang = self.studiengang_entry.get().strip()
        neues_datum = self.kalender.get_date()
        urlaubssemester = self.urlaub_var1.get() + self.urlaub_var2.get()
        neues_zeitmodell = self.get_db_zeitmodell(self.zeitmodell_var.get())

        if not neuer_studiengang:
            messagebox.showerror("Fehler", "Bitte einen Studiengang eingeben.")
            return

        daten = (neuer_studiengang, neues_datum, urlaubssemester, neues_zeitmodell)
        erfolg = self.master.logik.set_einstellungen_ansicht_daten("UPDATE", daten)

        if erfolg:
            self.logger.info(f"‚úÖ √Ñnderungen gespeichert: {daten}")
            messagebox.showinfo("Erfolg", "√Ñnderungen erfolgreich gespeichert.")
        else:
            self.logger.error("‚ùå Fehler beim Speichern der √Ñnderungen.")
            messagebox.showerror("Fehler", "√Ñnderungen konnten nicht gespeichert werden.")

    def datenbank_loeschen(self):
        """
        @brief L√∂scht die gesamte Datenbank und beendet die Anwendung.

        Diese Methode fragt den Benutzer, ob die gesamte Datenbank gel√∂scht werden soll.
        Falls der Benutzer best√§tigt, wird der L√∂schvorgang ausgef√ºhrt und die Anwendung 
        nach erfolgreicher L√∂schung beendet.

        @note Dieser Vorgang kann nicht r√ºckg√§ngig gemacht werden!

        @exception sqlite3.Error Falls ein Fehler beim L√∂schen der Datenbank auftritt.
        """
        best√§tigung = messagebox.askyesno(
            "Best√§tigung", 
            "M√∂chten Sie wirklich alle Daten l√∂schen?\nDies kann nicht r√ºckg√§ngig gemacht werden!"
        )
        
        if not best√§tigung:
            return

        self.logger.warning("‚ö†Ô∏è Datenbank wird gel√∂scht...")
        erfolg = self.master.logik.set_einstellungen_ansicht_daten("DELETE")

        if erfolg:
            self.logger.info("‚úÖ Datenbank gel√∂scht. Anwendung wird beendet.")
            messagebox.showinfo("Erfolg", "Datenbank gel√∂scht. Die Anwendung wird jetzt geschlossen.")
            self.master.beenden()
        else:
            self.logger.error("‚ùå Fehler beim L√∂schen der Datenbank.")
            messagebox.showerror("Fehler", "Datenbank konnte nicht gel√∂scht werden.")